<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  </head>
  <body>
    <nav class="navbar">
      <h3 id="headline">Devlin B's Projects!</h3>
      <div >
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" id="open">About Me</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="https://github.com/adevlinb" target="_blank">GitHub</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="https://www.linkedin.com/in/devlin-booth/" target="_blank">LinkdedIn</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="images/OUTCOMES 31822 RESUME.pdf" target="_blank">Resume</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="mailto:adevlin.booth@gmail.com" target="_blank">Email!</a>
          </li>
        </ul>
      </div>
    </nav>
    <div class="horizontal">
      <div class="vertical" id="left">
        <pre>
        <span class="title">MASTERMIND</span> <a class="git_links" href="https://github.com/adevlinb/Mastermind" target="_blank">(GitHub Repo)</a>
        <span class="tech">• JAVASCRIPT • HTML • CSS • GITHUB PAGES • AFFINITY PHOTO</span>
        • DIGITAL VERSION OF POPULAR 1970’S CODE-BREAKING GAME
        • DOM MANIPULATION TO ACCESS INPUT / EVENT HANDLERS
        • SIMPLIFIED CODE LOGIC THROUGH STEP X STEP APPROACH
       
         
        <span class="title">CLIMATE EVENTS</span> <a class="git_links" href="https://github.com/adevlinb/climate-events" target="_blank">(GitHub Repo)</a>
        <span class="tech">• NODEJS • EXPRESS • MONGODB • MONGOOSE • HEROKU • API CONSUMPTION</span>
        • EVENTS APP THAT ACCESSES TWO API’S:
          - 1ST FOR: LATT / LONG. COORDINATES, 2ND TO RETRIEVE WEATHER DATA
        • GOOGLE OAUTH AUTHENTICATION / AUTHORIZATION
        • TAGGING SYSTEM TO SEARCH FOR EVENTS
        • PLANNING: WIRE-FRAMING, ERD-DIAGRAMMING, USER-STORY IMPLEMENTATION
        
        
        <span class="title">TASTE•BUDS</span><a class="git_links" href="https://github.com/adevlinb/fakebuds" target="_blank">(GitHub Repo)</a>
        <span class="tech">• PYTHON • DJANGO • DTL • POSTGRESQL • HEROKU • AWS/S3 CLOUD STORAGE</span>
        • DINING EVENT CREATOR WITH RECIPE SHARING
        • DJANGO BUILT-IN AUTHENTICATION
        • AMAZON (AWS) S3 CLOUD STORAGE
        • PLANNING: WIRE-FRAMING, ERD-DIAGRAMMING, USER-STORY IMPLEMENTATION
        
         
        <span class="title">XYLA</span> <a class="git_links" href="https://github.com/adevlinb/XYLA" target="_blank">(GitHub Repo)</a>
        <span class="tech">• NODEJS • EXPRESS • REACT • MONGODB • MONGOOSE • HEROKU</span>
        • SOCIAL APP FOR BOOK-LOVERS
        • TOKEN BASED AUTHENTICATION / AUTHORIZATION
        • GOOGLE BOOKS API ACCESS
        • AJAX REQUESTS FROM REACT / CLIENT TO NODEJS / SERVER
        • PLANNING: WIRE-FRAMING, ERD-DIAGRAMMING, USER-STORY IMPLEMENTATION
        
        </pre>
        
      </div>
      <div class="vertical" id="right">
        <div class="buttonDiv">
          <button class="carousel_button carousel_button--left is_hidden"><img src="images/backward.png" alt="backward"></button>
          <div class="carousel">
            <div class="carousel_track_container">
              <ul class="carousel_track">
                <li class="carousel_slide current_slide"><img class="carousel_images" id="mastermind" src="images/mastermind.png" alt="First slide"></li>
                <li class="carousel_slide"><img class="carousel_images" id="climate" src="images/climateevents.png" alt="Second slide"></li>
                <li class="carousel_slide"><img class="carousel_images" id="taste" src="images/taste_buds.png" alt="Third slide"></li>
                <li class="carousel_slide"><img class="carousel_images" id="xyla" src="images/xyla2.png" alt="Fourth slide"></li>
              </ul>
            </div>
          </div>
          <button class="carousel_button carousel_button--right"><img src="images/forward.png" alt="forward"></button>
        </div>
        <div class="carousel_nav">
          <button class="carousel_indicator current_slide">•</button>
          <button class="carousel_indicator">•</button>
          <button class="carousel_indicator">•</button>
          <button class="carousel_indicator">•</button>
        </div>
        <div id="inline">
          <p><a class="app_links" href="https://adevlinb.github.io/Mastermind/" target="_blank">MASTERMIND</a></p>
          <p><a class="app_links" href="https://climate-events.herokuapp.com/" target="_blank">CLIMATE_EVENTS</a></p>
          <p><a class="app_links" href="https://taste--buds.herokuapp.com/" target="_blank">TASTE•BUDS</a></p>
          <p><a class="app_links" href="https://xyla-books.herokuapp.com/" target="_blank">XYLA</a></p>
        </div>
      </div>
  </div>

    <dialog class="modal_container" id="modal_container">
      <h1>Hi Devlin</h1>
      <button id="close_button">close</button>
    </dialog>

    <footer class="navbar" style="bottom: 0; position: fixed; width: 100%;"><p id="foot-txt">THANK YOU FOR VISITING MY PAGE!</p></footer>
  </body>
</html>


<script>

////////////////  MODAL VARIABLES ///////////////////////////
const openButton = document.getElementById('open');
const modal_container = document.getElementById('modal_container');
const closeButton = document.getElementById('close_button');


//////////////// CAROUSEL VARIABLES /////////////////////////
const track = document.querySelector('.carousel_track');
const slides = Array.from(track.children);
const nextButton = document.querySelector('.carousel_button--right');
const prevButton = document.querySelector('.carousel_button--left');
const dotsNav = document.querySelector('.carousel_nav');
const dots = Array.from(dotsNav.children);


////////////////// MODAL EVENT LISTENERS / FUNCTIONS ////////////
openButton.addEventListener('click', function() {
  modal_container.showModal()
  console.log('click open');
});

closeButton.addEventListener('click', function() {
  modal_container.close();
  console.log('click closed');
});


////////////////// CAROUSEL EVENT LISTENERS / FUNCTIONS ////////////
  const slideWidth = slides[0].getBoundingClientRect().width;

  const setSlidePosition = (slide, index) => {
    slide.style.left = slideWidth * index + 'px';
  }

  slides.forEach(setSlidePosition);

  const moveToSlide = (track, currentSlide, targetSlide) => {
    track.style.transform = "translateX(-" + targetSlide.style.left + ")";
    currentSlide.classList.remove('current_slide');
    targetSlide.classList.add('current_slide');
  }

  const updateDots = (currentDot, targetDot) => {
    currentDot.classList.remove('current_slide');
    targetDot.classList.add('current_slide');
  }

  const updateHideArrows = (slides, prevButton, nextButton, targetIndex) => {
    if (targetIndex === 0) {
      prevButton.classList.add('is_hidden');
      nextButton.classList.remove('is_hidden');
    } else if (targetIndex === slides.length - 1) {
      prevButton.classList.remove('is_hidden');
      nextButton.classList.add('is_hidden');
    } else {
      prevButton.classList.remove('is_hidden');
      nextButton.classList.remove('is_hidden');
    }
  }

  prevButton.addEventListener('click', e => {
    const currentSlide = track.querySelector('.current_slide');
    const prevSlide = currentSlide.previousElementSibling;
    const currentDot = dotsNav.querySelector('.current_slide');
    const prevDot = currentDot.previousElementSibling;
    const prevIndex = slides.findIndex(slide => slide === prevSlide)

    moveToSlide(track, currentSlide, prevSlide);
    updateDots(currentDot, prevDot);
    updateHideArrows(slides, prevButton, nextButton, prevIndex);
  })

  nextButton.addEventListener('click', e => {
    const currentSlide = track.querySelector('.current_slide');
    const nextSlide = currentSlide.nextElementSibling;
    const currentDot = dotsNav.querySelector('.current_slide');
    const nextDot = currentDot.nextElementSibling;
    const nextIndex = slides.findIndex(slide => slide === nextSlide);

    moveToSlide(track, currentSlide, nextSlide);
    updateDots(currentDot, nextDot);
    updateHideArrows(slides, prevButton, nextButton, nextIndex);
  });

  dotsNav.addEventListener('click', e => {
    const targetDot = e.target.closest('button');
    if (!targetDot) return;
    const currentSlide = track.querySelector('.current_slide');
    const nextSlide = currentSlide.nextElementSibling;
    const currentDot = dotsNav.querySelector('.current_slide');
    const targetIndex = dots.findIndex(dot => dot === targetDot);
    const targetSlide = slides[targetIndex];

    const nextIndex = slides.findIndex(slide => slide === nextSlide);

    moveToSlide(track, currentSlide, targetSlide);
    updateDots(currentDot, targetDot)
    updateHideArrows(slides, prevButton, nextButton, targetIndex);
  })

</script>