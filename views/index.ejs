<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=yes">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  </head>
  <body>
    <nav class="navbar">
      <div>
        <h3>Devlin B's</h3>
        <h3>Coding Projects</h3>
      </div>
      <input type="checkbox" id="check">
      <label for="check">
        <i id="btn"><img src="images/menu.png" alt="openNav"></i>
        <i id="cancel"><img src="images/close.png" alt="closeNav"></i>
      </label>
        <ul class="navbar-ul">
          <li class="nav-li">
            <a class="nav-a" id="open">About Me</a>
          </li>
          <li class="nav-li">
            <a class="nav-a" href="https://github.com/adevlinb" target="_blank">GitHub</a>
          </li>
          <li class="nav-li">
            <a class="nav-a" href="https://www.linkedin.com/in/devlin-booth/" target="_blank">LinkedIn</a>
          </li>
          <li class="nav-li">
            <a class="nav-a" href="images/Devlin Public Resume 4:7:22.pdf" target="_blank">Resume</a>
          </li>
          <li class="nav-li">
            <a class="nav-a" href="mailto:adevlin.booth@gmail.com" target="_blank">Email!</a>
          </li>
        </ul>
      </nav>
      <div id="aboutMeSection">
        <a href="#mainSection">Projects</a>
      </div>
      <div class="mainSection" id="mainSection">
        <div class="vertical" id="left">
          <div class="background selectedSpan">
            <div>
              <h3>XYLA</h3>
            </div>
            <div>
              <span class="tech">‚Ä¢ NODEJS | EXPRESS | REACT | MONGODB | MONGOOSE | HEROKU</span>
              ‚Ä¢ social app for book-lovers<br>
              ‚Ä¢ token based authentication / authorization<br>
              ‚Ä¢ google books API access<br>
              ‚Ä¢ AJAX requests from react / client to nodejs / server<br>
              <pre>‚Ä¢ <a class="title" href="https://xyla-books.herokuapp.com/" target="_blank">go to project</a>  ‚Ä¢<a class="git_links" href="https://github.com/adevlinb/XYLA" target="_blank">go to code</a></pre>
            </div>
          </div>
          <div class="background">
            <div>
              <h3>Taste‚Ä¢Buds</h3>
            </div>
            <div>
              <span class="tech">‚Ä¢ PYTHON | DJANGO | DTL | POSTGRESQL | HEROKU </span>
              ‚Ä¢ dining event creator with recipe sharing<br>
              ‚Ä¢ django built in authentication<br>
              ‚Ä¢ amazon s3 cloud storage for photo upload<br>
              ‚Ä¢ wire-framing, erd-diagraming, (AAU) user-story feature implementation
              <pre>‚Ä¢ <a class="title" href="https://taste-buds-dining.herokuapp.com/" target="_blank">go to project</a>  ‚Ä¢<a class="git_links" href="https://github.com/adevlinb/fakebuds" target="_blank">go to code</a></pre>
            </div>
        </div>
        <div class="background">
          <div>
            <h3>Climate Events</h3>
          </div>
          <div>
            <span class="tech">‚Ä¢ NODEJS | EXPRESS | MONGODB | MONGOOSE | HEROKU | API</span>
            ‚Ä¢ full crud events app that accesses two API‚Äôs<br>
            ‚Ä¢ 1st API for location, 2nd for weather data<br>
            ‚Ä¢ google Oauth authenticaiton / authorization<br>
            ‚Ä¢ tagging system to search for events<br>
            <pre>‚Ä¢ <a class="title" href="https://climate-events.herokuapp.com/" target="_blank">go to project</a>  ‚Ä¢<a class="git_links" href="https://github.com/adevlinb/climate-events" target="_blank">go to code</a></pre>
          </div>  
        </div>
        <div class="background">
          <div>
            <h3>Mastermind</h3>
          </div>
          <div>
            <span class="tech">‚Ä¢ JAVASCRIPT | HTML | CSS | GITHUB PAGES | AFFINITY PHOTO</span>
            ‚Ä¢ digital version of popular 1970‚Äôs code-breaking game<br>
            ‚Ä¢ DOM manipulation to access input / event handlers<br>
            ‚Ä¢ simplified code logic through step x step approach<br>
            ‚Ä¢ model-view-controller design patterm
            <pre>‚Ä¢ <a class="title" href="https://adevlinb.github.io/Mastermind/" target="_blank">go to project</a>  ‚Ä¢<a class="git_links" href="https://github.com/adevlinb/Mastermind" target="_blank">go to code</a></pre>
          </div>
        </div>
      </div>
      <div class="vertical" id="right">
        <div class="buttonDiv">
          <button class="carousel_button carousel_button--left is_hidden"><img src="images/backward.png" alt="backward"></button>
          <div class="carousel">
            <div class="carousel_track_container">
              <ul class="carousel_track">
                <li class="carousel_slide current_slide"><img class="carousel_images" id="xyla" src="images/xyla2.png" alt="Fourth slide"></li>
                <li class="carousel_slide"><img class="carousel_images" id="taste" src="https://i.imgur.com/sq1FqTx.png" alt="Third slide"></li>
                <li class="carousel_slide"><img class="carousel_images" id="climate" src="images/climateevents.png" alt="Second slide"></li>
                <li class="carousel_slide"><img class="carousel_images" id="mastermind" src="images/mastermind.png" alt="First slide"></li>
              </ul>
            </div>
          </div>
          <button class="carousel_button carousel_button--right"><img src="images/forward.png" alt="forward"></button>
        </div>
        <div class="carousel_nav">
          <button class="carousel_indicator current_slide app_links">XYLA</button>
          <button class="carousel_indicator app_links">TASTE‚Ä¢BUDS</button>
          <button class="carousel_indicator app_links">CLIMATE_EVENTS</button>
          <button class="carousel_indicator app_links">MASTERMIND</button>
        </div>
        <!-- <div id="inline">
          <p><a class="app_links" href="https://adevlinb.github.io/Mastermind/" target="_blank">MASTERMIND</a></p>
          <p><a class="app_links" href="https://climate-events.herokuapp.com/" target="_blank">CLIMATE_EVENTS</a></p>
          <p><a class="app_links" href="https://taste--buds.herokuapp.com/" target="_blank">TASTE/BUDS</a></p>
          <p><a class="app_links" href="https://xyla-books.herokuapp.com/" target="_blank">XYLA</a></p>
        </div> -->
      </div>
    </div>

    <dialog class="modal_container" id="modal_container">
      <div id="backDiv">
        <img id="modalProfileImage" src="images/profilePic.jpeg" alt="profilePic">
        <button id="close_button">X</button>
        <div id="hi">
          <h1 class="hello">Hi!</h1>
          <h1 id="devlin" class="hello">I'm Devlin!</h1>
        </div>
      </div>
      <div class="modalTitle">
        <div id="caption">
          <h6>Hollywood, CA: Mt. Lee ‚¨ÜÔ∏è,</h6>
          <h6>üëÄ into San Fernando Valley</h6>
        </div>
      </div>
      <div id="aboutMe">
        <div id="list">
          <p>Live:</p>
          <p>Los Angeles</p>
          <p>From:</p>
          <p>New Orleans</p>
          <p>Activities:</p>
          <p>ü•æ üèÉ‚Äç‚ôÇÔ∏è üèãÔ∏è‚Äç‚ôÇÔ∏è üßò‚Äç‚ôÇÔ∏è</p>
          <p>Entertainment:</p>
          <p>üì∫ üé≠ üé•</p>
          <p>Play Music:</p>
          <p>üéπ üé∏ üé§</p>
          <p>Hobbies:</p>
          <p>üßµ üß© ‚ôüÔ∏è</p>
          <p>Food!:</p>
          <p>üç£ üåÆ üåØ üçú ü•ü ü•ì üçî üç™ ü•õ</p>
        </div>
        <div id="aboutMeDescription">
          <h3>General Assembly</h3>
          <p>I recently completed the 420 hour software engineering intensive offered by General Assembly and 
            absolutely flourished throughout the program. I wasn't sure what to expect going into it, but have come out
            being sure that I made the right decision in attempting to switch careers into being a software engineer. Where did this come from?...
          </p>
          <h3>The Past</h3>
          <p> In September of 2021, after 10 years in service industry and many years of wanting more for myself, 
            I took the leap and made a change! A friend had completed a different bootcamp, came out 
            with an excellent job, and extremely happy. She recommended this approach and I'm hoping for a similar outcome!
          </p>
          <h3>The Future</h3>
          <p>
            I cannot wait to see where software engineering is going to bring me as I continue to learn more about the field and 
            all that is out there. The information seems to be endless and the ability to grow should be endless along with it!
          </p>

        </div>
      </div>
      <div id="modalFooter"> THANK YOU FOR COMING TO MY PAGE!</div>

    </dialog>
    <footer class="footer"><p id="foot-txt">THANK YOU FOR VISITING MY PAGE!</p></footer>
  </body>
</html>


<script>

////////////////  MODAL VARIABLES ///////////////////////////

const openButton = document.getElementById('open');
const modal_container = document.getElementById('modal_container');
const closeButton = document.getElementById('close_button');


//////////////// CAROUSEL VARIABLES /////////////////////////
const track = document.querySelector('.carousel_track');
const slides = Array.from(track.children);
const nextButton = document.querySelector('.carousel_button--right');
const prevButton = document.querySelector('.carousel_button--left');
const dotsNav = document.querySelector('.carousel_nav');
const dots = Array.from(dotsNav.children);
const projectParent = document.getElementById('left');
const projects = Array.from(projectParent.children);

////////////////// MODAL EVENT LISTENERS / FUNCTIONS ////////////

openButton.addEventListener('click', function() {
  modal_container.showModal()
  modal_container.classList.add('open')
  console.log('click open');
});

closeButton.addEventListener('click', function() {
  modal_container.close();
  modal_container.classList.remove('open')
  console.log('click closed');
});


////////////////// CAROUSEL EVENT LISTENERS / FUNCTIONS ////////////
  const slideWidth = slides[0].getBoundingClientRect().width;

  const setSlidePosition = (slide, index) => {
    slide.style.left = slideWidth * index + 'px';
  }

  slides.forEach(setSlidePosition);

  const moveToSlide = (track, currentSlide, targetSlide) => {
    track.style.transform = "translateX(-" + targetSlide.style.left + ")";
    currentSlide.classList.remove('current_slide');
    targetSlide.classList.add('current_slide');
  }

  const updateDots = (currentDot, targetDot) => {
    currentDot.classList.remove('current_slide');
    targetDot.classList.add('current_slide');
  }

  const updateProjects = (currentProject, targetProject) => {
    currentProject.classList.remove('selectedSpan');
    targetProject.classList.add('selectedSpan');
  }

  const updateHideArrows = (slides, prevButton, nextButton, targetIndex) => {
    if (targetIndex === 0) {
      prevButton.classList.add('is_hidden');
      nextButton.classList.remove('is_hidden');
    } else if (targetIndex === slides.length - 1) {
      prevButton.classList.remove('is_hidden');
      nextButton.classList.add('is_hidden');
    } else {
      prevButton.classList.remove('is_hidden');
      nextButton.classList.remove('is_hidden');
    }
  }

  prevButton.addEventListener('click', e => {
    const currentSlide = track.querySelector('.current_slide');
    const prevSlide = currentSlide.previousElementSibling;
    const currentDot = dotsNav.querySelector('.current_slide');
    const prevDot = currentDot.previousElementSibling;
    const prevIndex = slides.findIndex(slide => slide === prevSlide);

    const currentProject = projectParent.querySelector('.selectedSpan');
    const prevProject = currentProject.previousElementSibling;

    moveToSlide(track, currentSlide, prevSlide);
    updateDots(currentDot, prevDot);
    updateProjects(currentProject, prevProject);
    updateHideArrows(slides, prevButton, nextButton, prevIndex);
  })

  nextButton.addEventListener('click', e => {
    const currentSlide = track.querySelector('.current_slide');
    const nextSlide = currentSlide.nextElementSibling;
    const currentDot = dotsNav.querySelector('.current_slide');
    const nextDot = currentDot.nextElementSibling;
    const nextIndex = slides.findIndex(slide => slide === nextSlide);

    const currentProject = projectParent.querySelector('.selectedSpan');
    const nextProject = currentProject.nextElementSibling;

    moveToSlide(track, currentSlide, nextSlide);
    updateDots(currentDot, nextDot);
    updateProjects(currentProject, nextProject);
    updateHideArrows(slides, prevButton, nextButton, nextIndex);
  });

  dotsNav.addEventListener('click', e => {
    const targetDot = e.target.closest('button');
    if (!targetDot) return;
    const currentSlide = track.querySelector('.current_slide');
    const nextSlide = currentSlide.nextElementSibling;
    const currentDot = dotsNav.querySelector('.current_slide');
    const targetIndex = dots.findIndex(dot => dot === targetDot);
    const targetSlide = slides[targetIndex];

    const nextIndex = slides.findIndex(slide => slide === nextSlide);

    const currentProject = projectParent.querySelector('.selectedSpan');
    const targetProject = projects[targetIndex];

    moveToSlide(track, currentSlide, targetSlide);
    updateDots(currentDot, targetDot);
    updateProjects(currentProject, targetProject);
    updateHideArrows(slides, prevButton, nextButton, targetIndex);
  })

</script>